commit 3d358082141af19fadb2204d2340b02c4997661b
Author: Matthew Ogilvie <mmogilvi_ice@miniinfo.net>
Date:   Fri Feb 17 17:52:11 2012 -0700

    Add memory status monitor applet.

diff --git a/configure.in b/configure.in
index 58f248e..84d80bb 100644
--- a/configure.in
+++ b/configure.in
@@ -644,6 +644,7 @@ AC_ARG_ENABLE(lite,
       AC_DEFINE(CONFIG_TRAY, 		1,	[Window tray])
       AC_DEFINE(CONFIG_APPLET_MAILBOX,	1,	[Mailbox applet])
       AC_DEFINE(CONFIG_APPLET_CPU_STATUS,	1,	[CPU status applet])
+      AC_DEFINE(CONFIG_APPLET_MEM_STATUS,	1,	[Memory status applet])
       AC_DEFINE(CONFIG_APPLET_NET_STATUS,	1,	[Network status applet])
       AC_DEFINE(CONFIG_APPLET_CLOCK,	1,	[LCD clock applet])
       AC_DEFINE(CONFIG_APPLET_APM,	1,	[APM status applet])
diff --git a/src/Makefile.in b/src/Makefile.in
index 1b7b07b..ba36267 100644
--- a/src/Makefile.in
+++ b/src/Makefile.in
@@ -78,8 +78,8 @@ icewm_OBJS = \
         themes.o decorate.o browse.o \
         wmprog.o \
         atasks.o aworkspaces.o amailbox.o aclock.o acpustatus.o \
-	apppstatus.o aaddressbar.o objbar.o aapm.o atray.o ysmapp.o \
-        yxtray.o \
+	amemstatus.o apppstatus.o aaddressbar.o objbar.o aapm.o atray.o \
+        ysmapp.o yxtray.o \
         $(libitk_OBJS) $(libice_OBJS)
 
 icesh_LIBS = \
@@ -130,7 +130,8 @@ icebar_OBJS = \
 	$(libitk_OBJS) $(libice_OBJS) \
         wmtaskbar.o \
         wmprog.o browse.o themes.o wmaction.o \
-	amailbox.o aclock.o acpustatus.o apppstatus.o aaddressbar.o objbar.o
+	amailbox.o aclock.o acpustatus.o amemstatus.o apppstatus.o \
+	aaddressbar.o objbar.o
 icewmtray_OBJS = \
 	$(libitk_OBJS) $(libice_OBJS) yxtray.o icetray.o
 icewmtray_LIBS = \
diff --git a/src/amemstatus.cc b/src/amemstatus.cc
new file mode 100644
index 0000000..6d07e77
--- /dev/null
+++ b/src/amemstatus.cc
@@ -0,0 +1,254 @@
+/*
+ * IceWM
+ *
+ * Copyright (C) 1998-2012 Marko Macek, Matthew Ogilvie
+ *
+ * Memory Status
+ */
+#include "config.h"
+
+#ifdef CONFIG_APPLET_MEM_STATUS
+#include "ylib.h"
+#include "wmapp.h"
+
+#include "amemstatus.h"
+#include "sysdep.h"
+#include "default.h"
+
+#include "ytimer.h"
+
+#include "intl.h"
+
+#if defined(linux)
+
+extern ref<YPixmap> taskbackPixmap;
+
+MEMStatus::MEMStatus(YWindow *aParent): YWindow(aParent) {
+    samples = new unsigned long long *[taskBarMEMSamples];
+
+    for (int a(0); a < taskBarMEMSamples; a++)
+        samples[a] = new unsigned long long[MEM_STATES];
+
+    fUpdateTimer = new YTimer(taskBarMEMDelay);
+    if (fUpdateTimer) {
+        fUpdateTimer->setTimerListener(this);
+        fUpdateTimer->startTimer();
+    }
+
+    for (int j(0); j < MEM_STATES; j++)
+    {
+        color[j] = NULL;
+    }
+    color[MEM_USER] = new YColor(clrMemUser);
+    color[MEM_BUFFERS] = new YColor(clrMemBuffers);
+    color[MEM_CACHED] = new YColor(clrMemCached);
+    if (*clrMemFree) {
+        color[MEM_FREE] = new YColor(clrMemFree);
+    }
+    for (int i = 0; i < taskBarMEMSamples; i++) {
+        for (int j=0; j < MEM_STATES; j++)
+            samples[i][j]=0;
+        samples[i][MEM_FREE] = 1;
+    }
+    setSize(taskBarMEMSamples, 20);
+    getStatus();
+    updateStatus();
+    updateToolTip();
+}
+
+MEMStatus::~MEMStatus() {
+    delete fUpdateTimer;
+    for (int a(0); a < taskBarMEMSamples; a++) {
+        delete samples[a]; samples[a] = 0;
+    }
+    delete samples; samples = 0;
+    for (int j(0); j < MEM_STATES; j++) {
+        delete color[j]; color[j] = 0;
+    }
+}
+
+void MEMStatus::paint(Graphics &g, const YRect &/*r*/) {
+    int h = height();
+
+    for (int i(0); i < taskBarMEMSamples; i++) {
+        unsigned long long total = 0;
+        int j;
+        for (j = 0; j < MEM_STATES; j++) {
+            total += samples[i][j];
+        }
+
+        int y = h;
+        for (j = 0; j < MEM_STATES; j++) {
+            int bar;
+            if (j == MEM_STATES-1) {
+                bar = y;
+            } else {
+                bar = (int)((h * samples[i][j]) / total);
+            }
+
+            if (bar <= 0) {
+                continue;
+            }
+
+            if(color[j]) {
+                g.setColor(color[j]);
+                g.drawLine(i, y-1, i, y-bar);
+            } else {
+#ifdef CONFIG_GRADIENTS
+                ref<YPixbuf> gradient = parent()->getGradient();
+
+                if (gradient != null)
+                    g.copyPixbuf(*gradient,
+                                 this->x() + i, this->y() + y - bar,
+                                 width(), bar,
+                                 i, y - bar);
+                else
+#endif
+                    if (taskbackPixmap != null)
+                        g.fillPixmap(taskbackPixmap,
+                                     i, y - bar,
+                                     width(), bar,
+                                     this->x() + i, this->y() + y - bar);
+            }
+            y -= bar;
+        }
+    }
+}
+
+bool MEMStatus::handleTimer(YTimer *t) {
+    if (t != fUpdateTimer)
+        return false;
+    updateStatus();
+    if (toolTipVisible())
+        updateToolTip();
+    return true;
+}
+
+void MEMStatus::printAmount(char *out, size_t outSize,
+                            unsigned long long amount) {
+    if(amount >= (200ull*1024*1024*1024)) {
+        snprintf( out, outSize, "%llu %.20s",
+                  amount/(1024*1024*1024),
+                  _("GB") );
+    } else if(amount >= (200*1024*1024)) {
+        snprintf( out, outSize, "%llu %.20s",
+                  amount/(1024*1024),
+                  _("MB") );
+    } else if(amount >= (200*1024)) {
+        snprintf( out, outSize, "%llu %.20s",
+                  amount/1024,
+                  _("kB") );
+    } else {
+        snprintf( out, outSize, "%llu %.20s",
+                  amount,
+                  _("bytes") );
+    }
+    out[outSize-1]='\0';
+}
+
+void MEMStatus::updateToolTip() {
+    unsigned long long *cur=samples[taskBarMEMSamples-1];
+
+    unsigned long long total = 0;
+    for (int j(0); j < MEM_STATES; j++) {
+        total += cur[j];
+    }
+
+    char totalStr[64];
+    printAmount(totalStr, sizeof(totalStr), total);
+    char freeStr[64];
+    printAmount(freeStr, sizeof(freeStr), cur[MEM_FREE]);
+    char userStr[64];
+    printAmount(userStr, sizeof(userStr), cur[MEM_USER]);
+    char buffersStr[64];
+    printAmount(buffersStr, sizeof(buffersStr), cur[MEM_BUFFERS]);
+    char cachedStr[64];
+    printAmount(cachedStr, sizeof(cachedStr), cur[MEM_CACHED]);
+
+    char *memmsg = strJoin(_("Memory Total: "), totalStr, "\n   ",
+                           _("Free: "), freeStr, "\n   ",
+                           _("Cached: "), cachedStr, "\n   ",
+                           _("Buffers: "), buffersStr, "\n   ",
+                           _("User: "), userStr,
+                           NULL );
+    setToolTip(memmsg);
+    delete [] memmsg;
+}
+
+void MEMStatus::updateStatus() {
+    for (int i(1); i < taskBarMEMSamples; i++) {
+        for (int j(0); j < MEM_STATES ; j++) {
+            samples[i-1][j] = samples[i][j];
+        }
+    }
+    getStatus(),
+    repaint();
+}
+
+unsigned long long MEMStatus::parseField(const char *buf, size_t bufLen,
+                                         const char *needle) {
+    ptrdiff_t needleLen = strlen(needle);
+    const char *end = buf + bufLen;
+    while(buf < end) {
+        const char *nl = (const char *)memchr(buf, '\n', end-buf);
+        if(nl == 0)
+            break;
+
+        if(nl-buf > needleLen && memcmp(buf, needle, needleLen) == 0) {
+            char *endptr = NULL;
+            unsigned long long result = strtoull(buf+needleLen, &endptr, 10);
+
+            while(endptr!=0 && *endptr==' ')
+                endptr++;
+
+            if(*endptr=='k') {   // normal case
+                result *= 1024;
+            } else if(*endptr=='M') {
+                result *= 1024*1024;
+            } else if(*endptr=='G') {
+                result *= 1024*1024*1024;
+            }
+            return result;
+        }
+
+        buf = nl+1;
+    }
+    return 0;
+}
+
+void MEMStatus::getStatus() {
+    unsigned long long *cur=samples[taskBarMEMSamples-1];
+    int j;
+    for (j = 0; j < MEM_STATES; j++) {
+        cur[j] = 0;
+    }
+    cur[MEM_FREE] = 1;
+
+    int fd = open("/proc/meminfo", O_RDONLY);
+    if (fd == -1)
+        return;
+
+    char buf[4096];
+    ssize_t len = read(fd, buf, sizeof(buf)-1);
+    close(fd);
+    if (len < 0) {
+        return;
+    }
+    buf[len] = '\0';
+
+    cur[MEM_BUFFERS] = parseField(buf, len, "Buffers:");
+    cur[MEM_CACHED] = parseField(buf, len, "Cached:");
+    cur[MEM_FREE] = parseField(buf, len, "MemFree:");
+
+    unsigned long long total = parseField(buf, len, "MemTotal:");
+    if (total < 1)
+        total = 1;
+
+    unsigned long long user = total;
+    for (j = 0; j < MEM_STATES; j++) {
+        user -= cur[j];
+    }
+    cur[MEM_USER] = user;
+}
+#endif
+#endif
diff --git a/src/amemstatus.h b/src/amemstatus.h
new file mode 100644
index 0000000..cfa36f4
--- /dev/null
+++ b/src/amemstatus.h
@@ -0,0 +1,43 @@
+#ifndef __MEMSTATUS_H
+#define __MEMSTATUS_H
+
+#if defined(linux)
+
+// graphed from the bottom up:
+#define MEM_USER    (0)
+#define MEM_BUFFERS (1)
+#define MEM_CACHED  (2)
+#define MEM_FREE    (3)
+#define MEM_STATES  (4)
+
+#include "ywindow.h"
+
+class MEMStatus: public YWindow, public YTimerListener {
+public:
+    MEMStatus(YWindow *aParent = 0);
+    virtual ~MEMStatus();
+    
+    virtual void paint(Graphics &g, const YRect &r);
+
+    virtual bool handleTimer(YTimer *t);
+
+    void updateStatus();
+    void getStatus();
+    void updateToolTip();
+
+private:
+    static void printAmount(char *out, size_t outSize,
+                            unsigned long long amount);
+    static unsigned long long parseField(const char *buf,
+                                         size_t bufLen,
+                                         const char *needle);
+
+    unsigned long long int **samples;
+    YColor *color[MEM_STATES];
+    YTimer *fUpdateTimer;
+};
+#else
+#undef CONFIG_APPLET_MEM_STATUS
+#endif
+
+#endif
diff --git a/src/config.h.in b/src/config.h.in
index ce58d3a..793f618 100644
--- a/src/config.h.in
+++ b/src/config.h.in
@@ -15,6 +15,9 @@
 /* CPU status applet */
 #undef CONFIG_APPLET_CPU_STATUS
 
+/* Memory status applet */
+#undef CONFIG_APPLET_MEM_STATUS
+
 /* Mailbox applet */
 #undef CONFIG_APPLET_MAILBOX
 
diff --git a/src/default.h b/src/default.h
index e967e64..02460c0 100644
--- a/src/default.h
+++ b/src/default.h
@@ -58,6 +58,7 @@ XIV(bool, taskBarFullscreenAutoShow,            true)
 XIV(bool, taskBarDoubleHeight,                  false)
 XIV(bool, taskBarWorkspacesLeft,                true)
 XIV(bool, taskBarShowCPUStatus,                 true)
+XIV(bool, taskBarShowMEMStatus,                 false)
 XIV(bool, taskBarShowNetStatus,                 true)
 XIV(bool, taskBarLaunchOnSingleClick,           true)
 XIV(bool, taskBarShowCollapseButton,            false)
@@ -137,6 +138,7 @@ XIV(int, titleRollupButton,                     2)
 XIV(int, msgBoxDefaultAction,                   0)
 XIV(int, mailCheckDelay,                        30)
 XIV(int, taskBarCPUSamples,                     20)
+XIV(int, taskBarMEMSamples,                     20)
 XIV(int, focusRequestFlashTime,                 0)
 XIV(int, nestedThemeMenuMinNumber,              15)
 XIV(int, batteryPollingPeriod,                  10)
@@ -160,6 +162,7 @@ XSV(const char *, logoutCancelCommand,          0)
 XSV(const char *, shutdownCommand,              0)
 XSV(const char *, rebootCommand,                0)
 XIV(int, taskBarCPUDelay,                       500)
+XIV(int, taskBarMEMDelay,                       500)
 XIV(int, taskBarNetSamples,                     20)
 XIV(int, taskBarNetDelay,                       500)
 XSV(const char *, cpuCommand,                   "xterm -name top -title Process\\ Status -e top")
@@ -274,6 +277,7 @@ cfoption icewm_preferences[] = {
     OBV("TaskBarShowStartMenu",                 &taskBarShowStartMenu,          "Show 'Start' menu on task bar"),
     OBV("TaskBarShowWindowListMenu",            &taskBarShowWindowListMenu,     "Show 'window list' menu on task bar"),
     OBV("TaskBarShowCPUStatus",                 &taskBarShowCPUStatus,          "Show CPU status on task bar (Linux             & Solaris)"),
+    OBV("TaskBarShowMEMStatus",                 &taskBarShowMEMStatus,          "Show memory usage status on task bar (Linux only)"),
     OBV("TaskBarShowNetStatus",                 &taskBarShowNetStatus,          "Show network status on task bar (Linux only)"),
     OBV("TaskBarShowCollapseButton",            &taskBarShowCollapseButton,     "Show a button to collapse the taskbar"),
     OBV("TaskBarDoubleHeight",                  &taskBarDoubleHeight,           "Use double-height task bar"),
@@ -338,8 +342,10 @@ cfoption icewm_preferences[] = {
     OIV("MsgBoxDefaultAction",                  &msgBoxDefaultAction, 0, 1,     "Preselect to Cancel (0) or the OK (1) button in message boxes"),
     OIV("MailCheckDelay",                       &mailCheckDelay, 0, (3600*24),  "Delay between new-mail checks. (seconds)"),
 #ifdef CONFIG_TASKBAR
-    OIV("TaskBarCPUSamples",                    &taskBarCPUSamples, 2, 1000,    "Width of CPU Monitor"),
     OIV("TaskBarCPUDelay",                      &taskBarCPUDelay, 10, (60*60*1000),    "Delay between CPU Monitor samples in ms"),
+    OIV("TaskBarCPUSamples",                    &taskBarCPUSamples, 2, 1000,    "Width of CPU Monitor"),
+    OIV("TaskBarMEMSamples",                    &taskBarMEMSamples, 2, 1000,    "Width of Memory Monitor"),
+    OIV("TaskBarMEMDelay",                      &taskBarMEMDelay, 10, (60*60*1000),    "Delay between Memory Monitor samples in ms"),
     OIV("TaskBarNetSamples",                    &taskBarNetSamples, 2, 1000,    "Width of Net Monitor"),
     OIV("TaskBarNetDelay",                      &taskBarNetDelay, 10, (60*60*1000),    "Delay between Net Monitor samples in ms"),
     OIV("TaskbarButtonWidthDivisor",            &taskBarButtonWidthDivisor, 1, 25, "default number of tasks in taskbar"),
diff --git a/src/themable.h b/src/themable.h
index ad6a7ce..383d776 100644
--- a/src/themable.h
+++ b/src/themable.h
@@ -140,6 +140,10 @@ XSV(const char *, clrCpuIoWait,                 "rgb:60/00/60")
 XSV(const char *, clrCpuSoftIrq,                "rgb:00/FF/FF")
 XSV(const char *, clrCpuNice,                   "rgb:00/00/FF")
 XSV(const char *, clrCpuIdle,                   "rgb:00/00/00")
+XSV(const char *, clrMemUser,                   "rgb:40/40/80")
+XSV(const char *, clrMemBuffers,                "rgb:60/60/C0")
+XSV(const char *, clrMemCached,                 "rgb:80/80/FF")
+XSV(const char *, clrMemFree,                   "rgb:00/00/00")
 XSV(const char *, clrNetSend,                   "rgb:FF/FF/00")
 XSV(const char *, clrNetReceive,                "rgb:FF/00/FF")
 XSV(const char *, clrNetIdle,                   "rgb:00/00/00")
@@ -310,6 +314,12 @@ cfoption icewm_themable_preferences[] = {
     OSV("ColorCPUStatusNice",                   &clrCpuNice,                    "Nice load on the CPU monitor"),
     OSV("ColorCPUStatusIdle",                   &clrCpuIdle,                    "Idle (non) load on the CPU monitor, leave empty to force transparency"),
 #endif    
+#ifdef CONFIG_APPLET_MEM_STATUS
+    OSV("ColorMEMStatusUser",                   &clrMemUser,                    "User program usage in the memory monitor"),
+    OSV("ColorMEMStatusBuffers",                &clrMemBuffers,                 "OS buffers usage in the memory monitor"),
+    OSV("ColorMEMStatusCached",                 &clrMemCached,                  "OS cached usage in the memory monitor"),
+    OSV("ColorMEMStatusFree",                   &clrMemFree,                    "Free memory in the memory monitor"),
+#endif    
 #ifdef CONFIG_APPLET_NET_STATUS
     OSV("ColorNetSend",                         &clrNetSend,                    "Outgoing load on the network monitor"),
     OSV("ColorNetReceive",                      &clrNetReceive,                 "Incoming load on the network monitor"),
diff --git a/src/wmtaskbar.cc b/src/wmtaskbar.cc
index 1a86ce7..69f2259 100644
--- a/src/wmtaskbar.cc
+++ b/src/wmtaskbar.cc
@@ -28,6 +28,7 @@
 #include "aaddressbar.h"
 #include "aclock.h"
 #include "acpustatus.h"
+#include "amemstatus.h"
 #include "apppstatus.h"
 #include "amailbox.h"
 #include "objbar.h"
@@ -423,6 +424,12 @@ void TaskBar::initMenu() {
 }
 
 void TaskBar::initApplets() {
+#ifdef CONFIG_APPLET_MEM_STATUS
+    if (taskBarShowMEMStatus)
+        fMEMStatus = new MEMStatus(this);
+    else
+        fMEMStatus = 0;
+#endif
 #ifdef CONFIG_APPLET_CPU_STATUS
     if (taskBarShowCPUStatus)
         fCPUStatus = new CPUStatus(this);
@@ -610,6 +617,9 @@ void TaskBar::updateLayout(int &size_w, int &size_h) {
 #ifdef CONFIG_APPLET_CPU_STATUS
         { fCPUStatus, false, 1, true, 2, 2, false },
 #endif
+#ifdef CONFIG_APPLET_MEM_STATUS
+        { fMEMStatus, false, 1, true, 2, 2, false },
+#endif
 #ifdef CONFIG_APPLET_NET_STATUS
 #ifdef CONFIG_APPLET_MAILBOX
         { fNetStatus ? fNetStatus[0] : 0, false, 1, false, 1, 1, false },
diff --git a/src/wmtaskbar.h b/src/wmtaskbar.h
index 55f236b..6166c84 100644
--- a/src/wmtaskbar.h
+++ b/src/wmtaskbar.h
@@ -9,6 +9,9 @@
 #include "yxtray.h"
 
 class ObjectBar;
+#if CONFIG_APPLET_MEM_STATUS
+class MEMStatus;
+#endif
 #if CONFIG_APPLET_CPU_STATUS
 class CPUStatus;
 #endif
@@ -125,6 +128,9 @@ private:
 #ifdef CONFIG_APPLET_MAILBOX
     MailBoxStatus **fMailBoxStatus;
 #endif
+#ifdef CONFIG_APPLET_MEM_STATUS
+    MEMStatus *fMEMStatus;
+#endif
 #ifdef CONFIG_APPLET_CPU_STATUS
     CPUStatus *fCPUStatus;
 #endif
